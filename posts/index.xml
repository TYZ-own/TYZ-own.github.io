<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TYZ</title>
    <link>https://tyz-own.github.io/posts/</link>
    <description>Recent content in Posts on TYZ</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2024 15:29:49 +0800</lastBuildDate>
    <atom:link href="https://tyz-own.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RustFutures</title>
      <link>https://tyz-own.github.io/posts/rustfutures1/</link>
      <pubDate>Fri, 24 May 2024 15:29:49 +0800</pubDate>
      <guid>https://tyz-own.github.io/posts/rustfutures1/</guid>
      <description>RUST FUTURES-Week1 参考文章 200行代码讲透RUST FUTURES&#xA;RUST圣经&#xA;绿色线程(Green Threads) 代码 原文档的green threads可能因为版本问题已经不能编译通过了，这是修改后的：&#xA;green threads.rs&#xA;都是佬们写的，我只是个搬运工，之前有个ctx没对齐导致打印ctx时会出现segment fault，现已解决，大家可放心食用。&#xA;基于回调 基于回调的方法在编程中是一种常见的模式，尤其在处理异步操作时经常会用到。虽然在 JavaScript 中的回调地狱让人头痛，但在其他语言中，特别是像 Rust 这样的系统编程语言中，可以更好地管理回调。&#xA;在 Rust 中，基于回调的方法通常通过闭包来实现。闭包是一种可以捕获其周围环境并在稍后执行的匿名函数。下面是一个简单的例子，展示了如何在 Rust 中使用基于回调的方法：&#xA;use std::collections::HashMap; // 定义一个保存回调函数的HashMap // 键是字符串，值是一个闭包，它接受一个 i32 参数并返回一个 i32 // 这个闭包可以代表任何需要在以后执行的任务 let mut callbacks: HashMap&amp;lt;String, Box&amp;lt;dyn Fn(i32) -&amp;gt; i32&amp;gt;&amp;gt; = HashMap::new(); // 添加一个回调函数到 HashMap 中 callbacks.insert(&amp;#34;double&amp;#34;.to_string(), Box::new(|x| x * 2)); // 定义一个函数，它接受一个回调函数的名称和一个参数，然后调用相应的回调函数 fn call_callback(callback_name: &amp;amp;str, value: i32, callbacks: &amp;amp;HashMap&amp;lt;String, Box&amp;lt;dyn Fn(i32) -&amp;gt; i32&amp;gt;&amp;gt;) -&amp;gt; Option&amp;lt;i32&amp;gt; { if let Some(callback) = callbacks.</description>
    </item>
    <item>
      <title>Pin? Unpin?</title>
      <link>https://tyz-own.github.io/posts/pinunpin/</link>
      <pubDate>Thu, 23 May 2024 21:13:45 +0800</pubDate>
      <guid>https://tyz-own.github.io/posts/pinunpin/</guid>
      <description>gpt 解释： 在 Rust 中，Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt; 和 Pin&amp;lt;&amp;amp;mut T&amp;gt; 类型的实例可以用于异步编程中的 Future。这是因为在异步编程中，通常需要确保将异步任务钉住（pin）在内存中，以防止其移动。而 Pin 类型就是为了实现这种钉住的功能而设计的。&#xA;同时，这两种类型的实例会自动实现 Unpin trait 。Unpin trait 是 Rust 中的一个特殊 trait，它标识了类型在异步上下文中可以安全地被移动。因为 Pin 类型的实例在钉住后不能移动，所以它们的实例默认是不可移动的，因此自动实现了 Unpin trait。&#xA;这意味着，尽管在异步上下文中使用了 Pin 类型的实例，但由于它们自动实现了 Unpin trait，所以在必要时，编译器会自动为它们生成合适的代码，以确保它们在异步任务中的移动是安全的。这简化了异步编程中的类型处理，并提供了更好的类型安全性。&#xA;个人理解： 以下内容摘自RUST圣经：&#xA;将固定住的 Future 变为 Unpin 之前的章节我们有提到 async 函数返回的 Future 默认就是 !Unpin 的。&#xA;但是，在实际应用中，一些函数会要求它们处理的 Future 是 Unpin 的，此时，若你使用的 Future 是 !Unpin 的，必须要使用以下的方法先将 Future 进行固定:&#xA;Box::pin， 创建一个 Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt; pin_utils::pin_mut!， 创建一个 Pin&amp;lt;&amp;amp;mut T&amp;gt; 固定后获得的 Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt; 和 Pin&amp;lt;&amp;amp;mut T&amp;gt; 既可以用于 Future ，又会自动实现 Unpin。</description>
    </item>
  </channel>
</rss>
